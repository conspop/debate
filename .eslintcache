[{"/Users/Seb/Desktop/debate/src/index.js":"1","/Users/Seb/Desktop/debate/src/App.js":"2","/Users/Seb/Desktop/debate/src/reportWebVitals.js":"3","/Users/Seb/Desktop/debate/src/pages/Gather.jsx":"4","/Users/Seb/Desktop/debate/src/pages/StartGame.jsx":"5","/Users/Seb/Desktop/debate/src/pages/GatherScoreboard.jsx":"6","/Users/Seb/Desktop/debate/src/pages/GatherPlayer.jsx":"7","/Users/Seb/Desktop/debate/src/pages/Round.jsx":"8","/Users/Seb/Desktop/debate/src/pages/RoundPlayer.jsx":"9","/Users/Seb/Desktop/debate/src/pages/RoundScoreboard.jsx":"10","/Users/Seb/Desktop/debate/src/components/StartTimerButton.jsx":"11","/Users/Seb/Desktop/debate/src/components/Timer.jsx":"12"},{"size":500,"mtime":1609098555866,"results":"13","hashOfConfig":"14"},{"size":1855,"mtime":1609424538522,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1609080420376,"results":"16","hashOfConfig":"14"},{"size":668,"mtime":1609192007566,"results":"17","hashOfConfig":"14"},{"size":1708,"mtime":1609423242188,"results":"18","hashOfConfig":"14"},{"size":889,"mtime":1609424159460,"results":"19","hashOfConfig":"14"},{"size":221,"mtime":1609189524385,"results":"20","hashOfConfig":"14"},{"size":913,"mtime":1609434892291,"results":"21","hashOfConfig":"14"},{"size":1841,"mtime":1609435692693,"results":"22","hashOfConfig":"14"},{"size":736,"mtime":1609435188205,"results":"23","hashOfConfig":"14"},{"size":539,"mtime":1609282204101,"results":"24","hashOfConfig":"14"},{"size":208,"mtime":1609433884373,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13y3rxo",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},"/Users/Seb/Desktop/debate/src/index.js",[],["55","56"],"/Users/Seb/Desktop/debate/src/App.js",[],"/Users/Seb/Desktop/debate/src/reportWebVitals.js",[],"/Users/Seb/Desktop/debate/src/pages/Gather.jsx",[],"/Users/Seb/Desktop/debate/src/pages/StartGame.jsx",[],"/Users/Seb/Desktop/debate/src/pages/GatherScoreboard.jsx",[],"/Users/Seb/Desktop/debate/src/pages/GatherPlayer.jsx",[],"/Users/Seb/Desktop/debate/src/pages/Round.jsx",[],"/Users/Seb/Desktop/debate/src/pages/RoundPlayer.jsx",["57"],"/Users/Seb/Desktop/debate/src/pages/RoundScoreboard.jsx",["58","59"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Timer from '../components/Timer'\n\nfunction RoundScoreboard(props) {\n  const {rounds, gameId} = props\n  const round = rounds[rounds.length - 1]\n\n  useEffect(async () => {\n    if (rounds.length === 0) {\n      await axios.post('/api/newround', {\n        gameId\n      })\n      .catch(err => console.log(err.message))\n    } \n  })\n\n  return (\n    (rounds.length === 0) ?\n    <div>Loading</div> :\n    <div>\n      <h1>Topic: {round.topic}</h1>\n      <h3>Arguing Yes: {round.yesPlayer}</h3>\n      <h3>Arguing No: {round.noPlayer}</h3>\n      <Timer round={round} stages={props.stages} runTimer={props.runTimer} />\n    </div>\n  )\n}\n\nexport default RoundScoreboard","/Users/Seb/Desktop/debate/src/components/StartTimerButton.jsx",[],["60","61"],"/Users/Seb/Desktop/debate/src/components/Timer.jsx",["62"],"import React, {useState} from 'react'\n\nexport default function Timer(props) {\n  return (\n    (props.runTimer) ?\n    <h1>{props.stages[props.round.stage].timer / 1000}</h1> :\n    'Timer is not started'\n  )\n}\n\n",["63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":56,"column":3,"nodeType":"71","endLine":56,"endColumn":12,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":28,"nodeType":"71","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"69","severity":1,"message":"76","line":9,"column":13,"nodeType":"77","endLine":16,"endColumn":4},{"ruleId":"65","replacedBy":"78"},{"ruleId":"67","replacedBy":"79"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":16,"nodeType":"71","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"65","replacedBy":"80"},{"ruleId":"67","replacedBy":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setAmArguing'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.name, props.stages, round.yesPlayer, round.noPlayer, round.stage, amArguing] as a second argument to the useEffect Hook.","Identifier",["84"],"no-unused-vars","'useState' is defined but never used.","unusedVar","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["82"],["83"],["82"],["83"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Add dependencies array: [props.name, props.stages, round.yesPlayer, round.noPlayer, round.stage, amArguing]",{"range":"87","text":"88"},[1668,1668],", [props.name, props.stages, round.yesPlayer, round.noPlayer, round.stage, amArguing]"]